Terminals unused in grammar

   NUMBER


State 5 conflicts: 2 shift/reduce
State 17 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: REAL_NUMBER
    3       | INTEGER_NUMBER
    4       | f_expr
    5       | SYMBOL
    6       | LPAREN let_section s_expr RPAREN
    7       | LPAREN COND s_expr s_expr s_expr RPAREN
    8       | QUIT
    9       | error

   10 f_expr: LPAREN FUNC s_expr_list RPAREN
   11       | LPAREN SYMBOL s_expr_list RPAREN

   12 s_expr_list: s_expr s_expr_list
   13            | s_expr
   14            | %empty

   15 let_section: LPAREN let_list RPAREN
   16            | %empty

   17 arg_list: SYMBOL arg_list
   18         | SYMBOL

   19 let_list: let_list let_elem
   20         | LET let_elem

   21 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN
   22         | LPAREN SYMBOL s_expr RPAREN
   23         | LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   24         | LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256) 9
FUNC (258) 10
SYMBOL (259) 5 11 17 18 21 22 23 24
NUMBER (260)
TYPE (261) 21 23
INTEGER_NUMBER (262) 3
REAL_NUMBER (263) 2
LPAREN (264) 6 7 10 11 15 21 22 23 24
RPAREN (265) 6 7 10 11 15 21 22 23 24
LET (266) 20
EOL (267) 1
QUIT (268) 8
COND (269) 7
LAMBDA (270) 23 24


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
program (17)
    on left: 1, on right: 0
s_expr (18)
    on left: 2 3 4 5 6 7 8 9, on right: 1 6 7 12 13 21 22 23 24
f_expr (19)
    on left: 10 11, on right: 4
s_expr_list (20)
    on left: 12 13 14, on right: 10 11 12
let_section (21)
    on left: 15 16, on right: 6
arg_list (22)
    on left: 17 18, on right: 17 23 24
let_list (23)
    on left: 19 20, on right: 15 19
let_elem (24)
    on left: 21 22 23 24, on right: 19 20


State 0

    0 $accept: . program $end

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    f_expr   go to state 9


State 1

    9 s_expr: error .

    $default  reduce using rule 9 (s_expr)


State 2

    5 s_expr: SYMBOL .

    $default  reduce using rule 5 (s_expr)


State 3

    3 s_expr: INTEGER_NUMBER .

    $default  reduce using rule 3 (s_expr)


State 4

    2 s_expr: REAL_NUMBER .

    $default  reduce using rule 2 (s_expr)


State 5

    6 s_expr: LPAREN . let_section s_expr RPAREN
    7       | LPAREN . COND s_expr s_expr s_expr RPAREN
   10 f_expr: LPAREN . FUNC s_expr_list RPAREN
   11       | LPAREN . SYMBOL s_expr_list RPAREN

    FUNC    shift, and go to state 10
    SYMBOL  shift, and go to state 11
    LPAREN  shift, and go to state 12
    COND    shift, and go to state 13

    SYMBOL    [reduce using rule 16 (let_section)]
    LPAREN    [reduce using rule 16 (let_section)]
    $default  reduce using rule 16 (let_section)

    let_section  go to state 14


State 6

    8 s_expr: QUIT .

    $default  reduce using rule 8 (s_expr)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 16


State 9

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


State 10

   10 f_expr: LPAREN FUNC . s_expr_list RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    RPAREN  reduce using rule 14 (s_expr_list)

    s_expr       go to state 17
    f_expr       go to state 9
    s_expr_list  go to state 18


State 11

   11 f_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    RPAREN  reduce using rule 14 (s_expr_list)

    s_expr       go to state 17
    f_expr       go to state 9
    s_expr_list  go to state 19


State 12

   15 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 20

    let_list  go to state 21


State 13

    7 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 22
    f_expr  go to state 9


State 14

    6 s_expr: LPAREN let_section . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 23
    f_expr  go to state 9


State 15

    0 $accept: program $end .

    $default  accept


State 16

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 17

   12 s_expr_list: s_expr . s_expr_list
   13            | s_expr .

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    RPAREN  reduce using rule 13 (s_expr_list)
    RPAREN  [reduce using rule 14 (s_expr_list)]

    s_expr       go to state 17
    f_expr       go to state 9
    s_expr_list  go to state 24


State 18

   10 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 25


State 19

   11 f_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 26


State 20

   20 let_list: LET . let_elem

    LPAREN  shift, and go to state 27

    let_elem  go to state 28


State 21

   15 let_section: LPAREN let_list . RPAREN
   19 let_list: let_list . let_elem

    LPAREN  shift, and go to state 27
    RPAREN  shift, and go to state 29

    let_elem  go to state 30


State 22

    7 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 31
    f_expr  go to state 9


State 23

    6 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 32


State 24

   12 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 12 (s_expr_list)


State 25

   10 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 10 (f_expr)


State 26

   11 f_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 11 (f_expr)


State 27

   21 let_elem: LPAREN . TYPE SYMBOL s_expr RPAREN
   22         | LPAREN . SYMBOL s_expr RPAREN
   23         | LPAREN . TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   24         | LPAREN . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 33
    TYPE    shift, and go to state 34


State 28

   20 let_list: LET let_elem .

    $default  reduce using rule 20 (let_list)


State 29

   15 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 15 (let_section)


State 30

   19 let_list: let_list let_elem .

    $default  reduce using rule 19 (let_list)


State 31

    7 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 35
    f_expr  go to state 9


State 32

    6 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


State 33

   22 let_elem: LPAREN SYMBOL . s_expr RPAREN
   24         | LPAREN SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6
    LAMBDA          shift, and go to state 36

    s_expr  go to state 37
    f_expr  go to state 9


State 34

   21 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN
   23         | LPAREN TYPE . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 38


State 35

    7 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 39


State 36

   24 let_elem: LPAREN SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 40


State 37

   22 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 41


State 38

   21 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN
   23         | LPAREN TYPE SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6
    LAMBDA          shift, and go to state 42

    s_expr  go to state 43
    f_expr  go to state 9


State 39

    7 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


State 40

   24 let_elem: LPAREN SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 44

    arg_list  go to state 45


State 41

   22 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 22 (let_elem)


State 42

   23 let_elem: LPAREN TYPE SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 46


State 43

   21 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 47


State 44

   17 arg_list: SYMBOL . arg_list
   18         | SYMBOL .

    SYMBOL  shift, and go to state 44

    $default  reduce using rule 18 (arg_list)

    arg_list  go to state 48


State 45

   24 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 49


State 46

   23 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 44

    arg_list  go to state 50


State 47

   21 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 21 (let_elem)


State 48

   17 arg_list: SYMBOL arg_list .

    $default  reduce using rule 17 (arg_list)


State 49

   24 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 51
    f_expr  go to state 9


State 50

   23 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 52


State 51

   24 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 53


State 52

   23 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INTEGER_NUMBER  shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 54
    f_expr  go to state 9


State 53

   24 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 24 (let_elem)


State 54

   23 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 55


State 55

   23 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 23 (let_elem)
